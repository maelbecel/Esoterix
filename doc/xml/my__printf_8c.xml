<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="my__printf_8c" kind="file" language="C++">
    <compoundname>my_printf.c</compoundname>
    <includes refid="lib_2myprintf_2printf_8h" local="yes">printf.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes local="no">stdlib.h</includes>
    <incdepgraph>
      <node id="3">
        <label>stdarg.h</label>
      </node>
      <node id="2">
        <label>printf.h</label>
        <link refid="lib_2myprintf_2printf_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stdlib.h</label>
      </node>
      <node id="1">
        <label>lib/myprintf/my_printf.c</label>
        <link refid="my__printf_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="my__printf_8c_1af85180777da50c46f2a8315f6471b89f" prot="public" static="yes" mutable="no">
        <type>const struct <ref refid="structflags" kindref="compound">flags</ref></type>
        <definition>const struct flags Functions[]</definition>
        <argsstring>[]</argsstring>
        <name>Functions</name>
        <initializer>= {
    {&amp;<ref refid="lib_2myprintf_2printf_8h_1a2a72dd0b1dd647f26a1a427e38e10bc8" kindref="member">displaychar</ref>, &apos;c&apos;},
    {&amp;<ref refid="lib_2myprintf_2printf_8h_1a2d671cdf2fab73802dcfbef05a43460b" kindref="member">displaypercent</ref>, &apos;%&apos;},
    {&amp;<ref refid="lib_2myprintf_2printf_8h_1a7a90dc75c287d69d157b48142f75937d" kindref="member">displaynbr</ref>, &apos;i&apos;},
    {&amp;<ref refid="lib_2myprintf_2printf_8h_1a7a90dc75c287d69d157b48142f75937d" kindref="member">displaynbr</ref>, &apos;d&apos;},
    {&amp;<ref refid="lib_2myprintf_2printf_8h_1a7a90dc75c287d69d157b48142f75937d" kindref="member">displaynbr</ref>, &apos;h&apos;},
    {&amp;<ref refid="lib_2myprintf_2printf_8h_1a083a1f9ab0bc512f2f081834b80a7ba7" kindref="member">displaynbr_long</ref>, &apos;l&apos;},
    {&amp;<ref refid="lib_2myprintf_2printf_8h_1a2ad0a95479688134062d3fad17c7c805" kindref="member">displaystr</ref>, &apos;s&apos;},
    {&amp;<ref refid="lib_2myprintf_2printf_8h_1ac303bbbb865e2221e003caf9b16eab96" kindref="member">displaybinary</ref>, &apos;b&apos;},
    {&amp;<ref refid="lib_2myprintf_2printf_8h_1af54f93c35f9f2d567ccf5b2d81c41afd" kindref="member">displaystr_unprintable</ref>, &apos;S&apos;},
    {&amp;<ref refid="lib_2myprintf_2printf_8h_1aa69c0a59bcd8484db75ad71af0517848" kindref="member">displaynbr_octal</ref>, &apos;o&apos;},
    {&amp;<ref refid="lib_2myprintf_2printf_8h_1a2492c8f289a6b628987fa0d071e086bc" kindref="member">displaynbr_dec</ref>, &apos;u&apos;},
    {&amp;<ref refid="lib_2myprintf_2printf_8h_1a9d4862896d4f9695c933690924f68981" kindref="member">displaynbr_hexa</ref>, &apos;x&apos;},
    {&amp;<ref refid="lib_2myprintf_2printf_8h_1a13a3dfc9cbc91abda44ceb8106df71e5" kindref="member">displaynbr_hexa_capital</ref>, &apos;X&apos;},
    {&amp;<ref refid="lib_2myprintf_2printf_8h_1aded5dda92fae59e43be862461071db26" kindref="member">displaypointer</ref>, &apos;p&apos;},
    {NULL, -1},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/myprintf/my_printf.c" line="1" column="0" bodyfile="lib/myprintf/my_printf.c" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="my__printf_8c_1a14c55d6c81ea1c00c1d37edd5d7084be" prot="public" static="yes" mutable="no">
        <type>const struct <ref refid="structflags" kindref="compound">flags</ref></type>
        <definition>const struct flags Hashtags[]</definition>
        <argsstring>[]</argsstring>
        <name>Hashtags</name>
        <initializer>= {
    {&amp;<ref refid="lib_2myprintf_2printf_8h_1abeb55d53082183f8529abc7fbc4853f8" kindref="member">displaynbr_octal_hashtag</ref>, &apos;o&apos;},
    {&amp;<ref refid="lib_2myprintf_2printf_8h_1ac837582ffcb3e78bd204dcd7d8b51899" kindref="member">displaynbr_hexa_hashtag</ref>, &apos;x&apos;},
    {&amp;<ref refid="lib_2myprintf_2printf_8h_1a320766646b81f5208f095bb71e7573a6" kindref="member">displaynbr_hexa_capital_hashtag</ref>, &apos;X&apos;},
    {NULL, -1},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/myprintf/my_printf.c" line="1" column="0" bodyfile="lib/myprintf/my_printf.c" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="my__printf_8c_1a0ec576171edfa43be1a2058db87ee620" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void my_putchar</definition>
        <argsstring>(char c)</argsstring>
        <name>my_putchar</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/myprintf/my_printf.c" line="37" column="13" bodyfile="lib/myprintf/my_printf.c" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="my__printf_8c_1a1028aa49c3c317bc3d74fae2f04b228a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int displayhashtag</definition>
        <argsstring>(char c, va_list argv)</argsstring>
        <name>displayhashtag</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/myprintf/my_printf.c" line="42" column="5" bodyfile="lib/myprintf/my_printf.c" bodystart="42" bodyend="51"/>
        <referencedby refid="lib_2myprintf_2printf_8h_1a23690a6b1f3cf97e62ed0a74bb554062" compoundref="my__printf_8c" startline="64" endline="84">my_printf</referencedby>
      </memberdef>
      <memberdef kind="function" id="my__printf_8c_1a2df715c53a390d0a8c0dd5cc3d10e4b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int displayflags</definition>
        <argsstring>(char c, va_list argv)</argsstring>
        <name>displayflags</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/myprintf/my_printf.c" line="53" column="5" bodyfile="lib/myprintf/my_printf.c" bodystart="53" bodyend="62"/>
        <referencedby refid="lib_2myprintf_2printf_8h_1a23690a6b1f3cf97e62ed0a74bb554062" compoundref="my__printf_8c" startline="64" endline="84">my_printf</referencedby>
      </memberdef>
      <memberdef kind="function" id="my__printf_8c_1a23690a6b1f3cf97e62ed0a74bb554062" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int my_printf</definition>
        <argsstring>(char const *str,...)</argsstring>
        <name>my_printf</name>
        <param>
          <type>char const *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Write a string with arguments in the standard output. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>string to display </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>params for the string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/myprintf/my_printf.c" line="64" column="5" bodyfile="lib/myprintf/my_printf.c" bodystart="64" bodyend="84"/>
        <references refid="my__printf_8c_1a2df715c53a390d0a8c0dd5cc3d10e4b8" compoundref="my__printf_8c" startline="53" endline="62">displayflags</references>
        <references refid="my__printf_8c_1a1028aa49c3c317bc3d74fae2f04b228a" compoundref="my__printf_8c" startline="42" endline="51">displayhashtag</references>
        <referencedby refid="python__parser_8c_1a65513290015f4a326d72e14b8f885846" compoundref="python__parser_8c" startline="42" endline="56">getvar</referencedby>
        <referencedby refid="main_8c_1ab6ab5095713a29ce48356b13afcb3a42" compoundref="main_8c" startline="33" endline="45">main</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">**<sp/>EPITECH<sp/>PROJECT,<sp/>2021</highlight></codeline>
<codeline lineno="3"><highlight class="comment">**<sp/>my_printf.c</highlight></codeline>
<codeline lineno="4"><highlight class="comment">**<sp/>File<sp/>description:</highlight></codeline>
<codeline lineno="5"><highlight class="comment">**<sp/>my<sp/>printf</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lib_2myprintf_2printf_8h" kindref="compound">printf.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflags" kindref="compound">flags</ref><sp/>Functions[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>{&amp;<ref refid="include_2printf_8h_1a2a72dd0b1dd647f26a1a427e38e10bc8" kindref="member">displaychar</ref>,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>{&amp;<ref refid="include_2printf_8h_1a2d671cdf2fab73802dcfbef05a43460b" kindref="member">displaypercent</ref>,<sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>{&amp;<ref refid="include_2printf_8h_1a7a90dc75c287d69d157b48142f75937d" kindref="member">displaynbr</ref>,<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>{&amp;<ref refid="include_2printf_8h_1a7a90dc75c287d69d157b48142f75937d" kindref="member">displaynbr</ref>,<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>{&amp;<ref refid="include_2printf_8h_1a7a90dc75c287d69d157b48142f75937d" kindref="member">displaynbr</ref>,<sp/></highlight><highlight class="charliteral">&apos;h&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>{&amp;<ref refid="include_2printf_8h_1a083a1f9ab0bc512f2f081834b80a7ba7" kindref="member">displaynbr_long</ref>,<sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>{&amp;<ref refid="include_2printf_8h_1a2ad0a95479688134062d3fad17c7c805" kindref="member">displaystr</ref>,<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>{&amp;<ref refid="include_2printf_8h_1ac303bbbb865e2221e003caf9b16eab96" kindref="member">displaybinary</ref>,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>{&amp;<ref refid="include_2printf_8h_1af54f93c35f9f2d567ccf5b2d81c41afd" kindref="member">displaystr_unprintable</ref>,<sp/></highlight><highlight class="charliteral">&apos;S&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>{&amp;<ref refid="include_2printf_8h_1aa69c0a59bcd8484db75ad71af0517848" kindref="member">displaynbr_octal</ref>,<sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>{&amp;<ref refid="include_2printf_8h_1a2492c8f289a6b628987fa0d071e086bc" kindref="member">displaynbr_dec</ref>,<sp/></highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>{&amp;<ref refid="include_2printf_8h_1a9d4862896d4f9695c933690924f68981" kindref="member">displaynbr_hexa</ref>,<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>{&amp;<ref refid="include_2printf_8h_1a13a3dfc9cbc91abda44ceb8106df71e5" kindref="member">displaynbr_hexa_capital</ref>,<sp/></highlight><highlight class="charliteral">&apos;X&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>{&amp;<ref refid="include_2printf_8h_1aded5dda92fae59e43be862461071db26" kindref="member">displaypointer</ref>,<sp/></highlight><highlight class="charliteral">&apos;p&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>{NULL,<sp/>-1},</highlight></codeline>
<codeline lineno="28"><highlight class="normal">};</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflags" kindref="compound">flags</ref><sp/>Hashtags[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>{&amp;<ref refid="include_2printf_8h_1abeb55d53082183f8529abc7fbc4853f8" kindref="member">displaynbr_octal_hashtag</ref>,<sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>{&amp;<ref refid="include_2printf_8h_1ac837582ffcb3e78bd204dcd7d8b51899" kindref="member">displaynbr_hexa_hashtag</ref>,<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>{&amp;<ref refid="include_2printf_8h_1a320766646b81f5208f095bb71e7573a6" kindref="member">displaynbr_hexa_capital_hashtag</ref>,<sp/></highlight><highlight class="charliteral">&apos;X&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>{NULL,<sp/>-1},</highlight></codeline>
<codeline lineno="35"><highlight class="normal">};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="include_2my_8h_1ac4de74d04dc6e263345755eb62676802" kindref="member">my_putchar</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>write(1,<sp/>&amp;c,<sp/>1);</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="my__printf_8c_1a1028aa49c3c317bc3d74fae2f04b228a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="my__printf_8c_1a1028aa49c3c317bc3d74fae2f04b228a" kindref="member">displayhashtag</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/>va_list<sp/>argv)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>Hashtags[i].<ref refid="structflags_1a11764cc96bb263d1f257bcc01205a787" kindref="member">flag</ref><sp/>!=<sp/>-1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Hashtags[i].<ref refid="structflags_1a11764cc96bb263d1f257bcc01205a787" kindref="member">flag</ref><sp/>==<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Hashtags[i].<ref refid="structflags_1a115095187e7b25e8c8ce02fbd6551b3b" kindref="member">func</ref>(argv);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="my__printf_8c_1a2df715c53a390d0a8c0dd5cc3d10e4b8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="my__printf_8c_1a2df715c53a390d0a8c0dd5cc3d10e4b8" kindref="member">displayflags</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/>va_list<sp/>argv)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>Functions[i].<ref refid="structflags_1a11764cc96bb263d1f257bcc01205a787" kindref="member">flag</ref><sp/>!=<sp/>-1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Functions[i].<ref refid="structflags_1a11764cc96bb263d1f257bcc01205a787" kindref="member">flag</ref><sp/>==<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functions[i].<ref refid="structflags_1a115095187e7b25e8c8ce02fbd6551b3b" kindref="member">func</ref>(argv);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="lib_2myprintf_2printf_8h_1a23690a6b1f3cf97e62ed0a74bb554062" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="my__printf_8c_1a23690a6b1f3cf97e62ed0a74bb554062" kindref="member">my_printf</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*str,<sp/>...)</highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>argv;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(argv,<sp/>str);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(str[i]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>str[i<sp/>+<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="my__printf_8c_1a1028aa49c3c317bc3d74fae2f04b228a" kindref="member">displayhashtag</ref>(str[i<sp/>+<sp/>2],<sp/>argv);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="my__printf_8c_1a2df715c53a390d0a8c0dd5cc3d10e4b8" kindref="member">displayflags</ref>(str[i<sp/>+<sp/>1],<sp/>argv);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2my_8h_1ac4de74d04dc6e263345755eb62676802" kindref="member">my_putchar</ref>(str[i]);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(argv);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="lib/myprintf/my_printf.c"/>
  </compounddef>
</doxygen>
